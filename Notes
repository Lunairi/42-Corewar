to do:

Write helper functions for indirect, direct, and register placement
helper functions for add and subtract


getting offsets:

ACB:

    ACB1    ACB2    ACB3
    [0-3]   [0-3]   [0-3]   00
    vm->core[index] = ACB
    vm->core[index - 1] = OP

copy OP into variable opcode
copy ACB into variable acb

ACB1 == 0:
    invalid ACB,
    instruction without parameters

ACB1 == 1:
    read as register - 1 byte
        vm->info[i].regs[vm->core[vm->info[i].index + 1]]
    index += 1

ACB1 == 2:
    read direct value - 4 bytes
        vm->core[vm->info[i].index],
        vm->core[vm->info[i].index + 1],
        vm->core[vm->info[i].index + 2],
        vm->core[vm->info[i].index + 3]
    index += 4

ACB1 == 3:
    read indirect value - 2 bytes
    vm->core[vm->info[i].index] * 0x100 + vm->core[vm->info[i].index + 1]
    index += 2

index now points to byte after param 1

ACB2 == 0:
    invalid ACB,
    instruction without parameters,
    instruction with only one parameter

ACB2 == 1:
    read as register - 1 byte
        vm->info[i].regs[vm->core[vm->info[i].index + 1]]
    index += 1

ACB2 == 2:
    read direct value - 4 bytes
        vm->core[vm->info[i].index],
        vm->core[vm->info[i].index + 1],
        vm->core[vm->info[i].index + 2],
        vm->core[vm->info[i].index + 3]
    index += 4

ACB2 == 3:
    read indirect value - 2 bytes
    vm->core[vm->info[i].index] * 0x100 + vm->core[vm->info[i].index + 1]
    index += 2

index now points to byte after param 2

ACB3 == 0:
    invalid ACB,
    instruction without parameters,
    instruction with only one parameter

ACB3 == 1:
    read as register - 1 byte
        vm->info[i].regs[vm->core[vm->info[i].index + 1]]
    index += 1

ACB3 == 2:
    read direct value - 4 bytes
        vm->core[vm->info[i].index],
        vm->core[vm->info[i].index + 1],
        vm->core[vm->info[i].index + 2],
        vm->core[vm->info[i].index + 3]
    index += 4

ACB3 == 3:
    read indirect value - 2 bytes
    vm->core[vm->info[i].index] * 0x100 + vm->core[vm->info[i].index + 1]
    index += 2


** Notes

Handle negative values for indirect addressing
Consolidate Isa's code for interpreting negative indices into its own function
Restrict index output into range 0 - 4096


carry is only modified if new value is 0

To Do List:

Handle header validation
Handle size restriction
Handle command-line bugs
Convert t_io into a linked list
Figure out endianness, and clean up all related bugs


priority queue implementation:

priority = num_cycles of current process - wait_cycle of current process


min heap

list
    foreach process in processes
        if !process.executing
            remove from list
            process->last = process->next
            process->next = process->front
array
    for each node i
        arr[i/2] = parent
        arr[2*i + 1] = left child
        arr[2*i + 2] = right child
    if bad access, realloc array and try again




























    for regular, idx_mod indirects
    for longs, do not idx_mod indirects

    live: (1 param) - FINISHED
    	name = read_core_4(PC + 1)
    		set_live(name)

    ld: (2 param)
    	IND/DIR: (read)
    		DIR: value = read_core_4(PC)
    		IND: index = read_core_2(PC)
    			 value = read_core_4(index)
    	REG: (write)
    			 reg = read_core_1(PC)
    			 write_reg(value, reg)

    lld: (2 param)
    	IND/DIR: (read)
    		DIR: value = read_core_4(PC)
    		IND: index = read_core_2(PC)
    			 value = read_core_4(index)
    	REG: (write)
    			 reg = read_core_1(PC)
    			 write_reg(value, reg)

    ldi: (3 params)
    	REG/DIR/IND: (read 1)
    		IND: index = read_core_2(PC)
    			 value = read_core_4(PC)
    		REG: reg = read_core_1(PC)
    	 		 value = read_reg(reg)
    	 	DIR: value = read_core_4(PC)
    	REG/DIR: (read 2)
    		REG: reg = read_core_1(PC)
    			 value_2 = read_reg(reg)
    		DIR: value_2 = read_core_4(PC)
    	REG: (write)
    		value_3 = read_core_4(value + value_2 + OP_CODE_PC) [NOTE: DO NOT MOVE PC]
    		reg = read_core_1(PC)
    		write_reg(value_3, reg)

    lldi: (3 params)
    	REG/DIR/IND: (read 1)
    		IND: index = read_core_2(PC)
    			 value = read_core_4(PC)
    		REG: reg = read_core_1(PC)
    	 		 value = read_reg(reg)
    	 	DIR: value = read_core_4(PC)
    	REG/DIR: (read 2)
    		REG: reg = read_core_1(PC)
    			 value_2 = read_reg(reg)
    		DIR: value_2 = read_core_4(PC)
    	REG: (write)
    		value_3 = read_core_4(value + value_2 + OP_CODE_PC) [NOTE: DO NOT MOVE PC]
    		reg = read_core_1(PC)
    		write_reg(value_3, reg)

    st: (VIS UPDATED NEEDED)
    	(2 param)
    	REG: (read)
    			 reg = read_core_1(PC)
    			 value = read_reg(PC)
    	IND/REG: (write)
    		IND: index = read_core_2(PC)
    			 write_core_4(value, index)
    		REG: reg = read_core_1(PC)
    			 write_reg(value, reg)

    sti: (3 param) (VIS UPDATE NEEDED)
    	REG: (read 1)
    		REG: reg = read_core_1(PC)
    			 value = read_reg(reg)
    	REG/DIR/IND: (read 2)
    		REG: reg = read_core_1(PC)
    			 value_2 = read_reg(reg)
    		DIR: value_2 = read_core_4(PC)
    		IND: index = read_core_2(PC)
    			 value_2 = read_core_4(index)
    	REG/DIR: (read 3)
    		REG: reg = read_core_1(PC)
    			 value_3 = read_reg(reg)
    		DIR: value_3 = read_core_4(PC)
    	CORE: (write)
    		write_core(value, value_2 + value_3 + PC) [NOTE: DO NOT MOVE PC]

    and/or/xor: (3 param) - FINISHED
    	REG/IND/DIR: (read 1)
    		REG: reg = read_core_1(PC)
    			 value = read_reg(reg)
    		DIR: value = read_core_4(PC)
    		IND: index = read_core_2(PC)
    			 value = read_core_4(index)
    	REG/IND/DIR: (read 2)
    		REG: reg = read_core_1(PC)
    			 value_2 = read_reg(reg)
    		DIR: value_2 = read_core_4(PC)
    		IND: index = read_core_2(PC)
    			 value_2 = read_core_4(index)
    	REG: (write)
    			 reg = read_core_1(PC)
    			 write_reg(op(value, value_2), reg)

    add/sub: (3 params) - FINISHED
    	REG: (read 1)
    		 reg = read_core_1(PC)
    		 value = read_reg(reg)
    	REG: (read 2)
    		 reg = read_core_1(PC)
    		 value_2 = read_reg(reg)
    	REG: (write)
    		 reg = read_index(PC)
    		 write_reg(op(value, value_2), reg)

    aff: (1 param)
    	REG: (read)
    		REG: reg = read_core_1(PC)
    		 	 value = read_reg(PC) % 256
    	STDOUT: (write)
    			 ft_putchar(value)

    zjmp: (1 param) - FINISHED
    	DIR: (read)
    		 index = read_core_2(PC) % IDX_MOD
    	CARRY?: (write)
    		 write_reg(PC + index, PC)

    fork: (1 param) - FINISHED
    	DIR: (read)
    		 index = read_core_2(PC) % IDX_MOD
    	NEW_PC:
    		 new_proc = copy_proc(self)
    		 write_reg(PC + index, new_proc.pc)

    lfork: (1 param) - FINISHED
    	DIR: (read)
    		 index = read_core_2(PC)
    	NEW_PC:
    		 new_proc = copy_proc(self)
    		 write_reg(PC + index, new_proc.pc)
